{"version":3,"sources":["services/shipmentServices.js","components/common/pagination.jsx","components/common/searchBox.jsx","components/shipmentsTable.jsx","components/shipments.jsx","helper/helpers.js","components/shipmentDetails.jsx","components/common/not-found.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["apiEndpoint","apiUrl","updateShipment","shipment","axios","put","id","Pagination","props","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","Fragment","aria-label","className","map","page","key","onClick","SearchBox","value","onChange","type","name","placeholder","e","currentTarget","ShipmentsTable","shipments","onSort","updateName","changeMode","length","scope","index","editMode","aria-describedby","defaultValue","target","mode","to","style","display","Shipments","state","shipmentsCount","searchQuery","sortCol","order","handelPageChange","setState","handelSearch","query","handelSort","sortKey","handelUpdateMode","indexOf","handelUpdate","a","toast","success","position","POSITION","TOP_CENTER","get","data","this","count","shipmentsList","filtredShipments","filter","item","toLowerCase","startsWith","items","pageNumber","startIndex","slice","take","paginate","orderBy","Component","ShipmentDetails","shipmentId","match","params","respose","status","history","replace","destination","total","NotFound","Home","class","App","href","data-toggle","data-target","aria-controls","aria-expanded","path","component","exact","Boolean","window","location","hostname","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mcAOMA,E,MAAcC,EAOb,SAASC,EAAeC,GAC3B,OAAOC,IAAMC,IAAIL,EAAc,IAAMG,EAASG,GAAIH,G,qBCsBvCI,EAjCI,SAACC,GAAW,IAEnBC,EAAoDD,EAApDC,WAAYC,EAAwCF,EAAxCE,SAAUC,EAA8BH,EAA9BG,aAAcC,EAAgBJ,EAAhBI,YAEtCC,EAAaC,KAAKC,KAAKN,EAAaC,GAC1C,GAAmB,IAAfG,EAAkB,OAAO,KAC7B,IAAMG,EAAQC,IAAEC,MAAM,EAAGL,EAAa,GAGtC,OACI,kBAAC,IAAMM,SAAP,KACI,yBAAKC,aAAW,2BACZ,wBAAIC,UAAU,cAETL,EAAMM,KACH,SAAAC,GAAI,OACA,wBAAIC,IAAKD,EAAMF,UAAWE,IAASX,EAAc,mBAAqB,cAClE,4BAAQS,UAAU,YAAYI,QAAS,kBAAMd,EAAaY,KAASA,WCIpFG,EAtBG,SAAClB,GAAW,IAElBmB,EAAoBnB,EAApBmB,MAAOC,EAAapB,EAAboB,SAIf,OACI,2BACAC,KAAK,OACLC,KAAK,kBACLT,UAAU,qBACVU,YAAY,mBACZJ,MAAOA,EACPC,SAAU,SAAAI,GAAC,OAAGJ,EAASI,EAAEC,cAAcN,WCZ/C,IA+EeO,EA/EQ,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAErD,OAAKH,EAAUI,OAOX,2BAAOlB,UAAU,qBACb,+BACI,4BACI,wBAAImB,MAAM,MAAMf,QAAS,kBAAMW,EAAO,QAAtC,SACA,wBAAII,MAAM,MAAMf,QAAS,kBAAMW,EAAO,UAAtC,UACA,wBAAII,MAAM,MAAMf,QAAS,kBAAMW,EAAO,UAAtC,UACA,wBAAII,MAAM,MAAMf,QAAS,kBAAMW,EAAO,UAAtC,UACA,wBAAII,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,eAGR,+BAGQL,EAAUb,KAAI,SAACnB,EAAUsC,GAAX,OAEV,wBAAIjB,IAAKrB,EAASG,IACd,wBAAIkC,MAAM,OAAV,IAAkBrC,EAASG,IAC3B,4BAC2B,SAAtBH,EAASuC,UAAuB,8BAAOvC,EAAS2B,MAG1B,SAAtB3B,EAASuC,UACN,8BAEI,yBAAKrB,UAAU,cACX,2BAAOQ,KAAK,eAAeR,UAAU,eAAef,GAAG,eACnDqC,mBAAiB,YAAYZ,YAAY,aACzCa,aAAczC,EAAS2B,KACvBF,SAAU,SAACI,GACP7B,EAAS2B,KAAOE,EAAEa,OAAOlB,YAYjD,4BAAKxB,EAAS2C,MACd,4BAAK3C,EAAS0B,MACd,4BAAI,kBAAC,IAAD,CAAML,IAAKrB,EAASG,GAAIyC,GAAE,qBAAgB5C,EAASG,KAAnD,YACJ,4BACI,4BAAQe,UAAU,yBACd2B,MAAO,CAAEC,QAA+B,SAAtB9C,EAASuC,SAAsB,QAAU,QAC3DjB,QAAS,WAAQa,EAAWnC,KAFhC,UAIA,4BAAQkB,UAAU,yBACd2B,MAAO,CAAEC,QAA+B,SAAtB9C,EAASuC,SAAsB,QAAU,QAC3DjB,QAAS,WACLY,EAAWlC,GACXA,EAASuC,SAAW,SAJ5B,eAxDjB,yD,QCwHAQ,E,2MAnHXC,MAAQ,CAEJhB,UAAW,GAEXiB,eAAgB,EAChB1C,SAAU,GACVE,YAAa,EACbyC,YAAa,GACbC,QAAS,CAAE9B,IAAK,KAAM+B,MAAO,Q,EAajCC,iBAAmB,SAAAjC,GACf,EAAKkC,SAAS,CAAE7C,YAAaW,K,EAGjCmC,aAAe,SAAAC,GACX,EAAKF,SAAS,CAAEJ,YAAaM,EAAO/C,YAAa,K,EAIrDgD,WAAa,SAAAC,GACT,IAAIP,EAAO,eAAQ,EAAKH,MAAMG,SAE1BA,EAAQ9B,MAAQqC,EAChBP,EAAQC,MAA2B,QAAlBD,EAAQC,MAAkB,OAAS,MAIpDD,EAAU,CAAE9B,IAAKqC,EAASN,MAAO,OAGrC,EAAKE,SAAS,CAAEH,a,EAGpBQ,iBAAqB,SAAC3D,GAClBA,EAASuC,SAAS,OAClB,IAAMP,EAAS,YAAO,EAAKgB,MAAMhB,WAC3BM,EAAQN,EAAU4B,QAAQ5D,GAChCgC,EAAUM,GAAStC,EACnB,EAAKsD,SAAS,CAAEtB,e,EAIpB6B,a,uCAAe,WAAO7D,GAAP,iBAAA8D,EAAA,sEAEL/D,EAAeC,GAFV,OAGLgC,EAHK,YAGW,EAAKgB,MAAMhB,WAC3BM,EAAQN,EAAU4B,QAAQ5D,GAChCgC,EAAUM,GAAStC,EACnB,EAAKsD,SAAS,CAAEtB,cAEhB+B,IAAMC,QAAQ,kCAAmC,CAC7CC,SAAUF,IAAMG,SAASC,aATlB,2C,2QJvDRlE,IAAMmE,IAAIvE,G,gBIiBCmC,E,EAANqC,KACRC,KAAKhB,SAAS,CAAEtB,c,qIAoDV,IAEUuC,EAAUD,KAAKtB,MAAMhB,UAA7BI,OAFH,EAG6EkC,KAAKtB,MAA/EzC,EAHH,EAGGA,SAAUE,EAHb,EAGaA,YAAwB+D,EAHrC,EAG0BxC,UAA0BkB,EAHpD,EAGoDA,YAAaC,EAHjE,EAGiEA,QAIlEsB,EAAmBD,EAEnBtB,IACAuB,EAAmBD,EAAcE,QAAO,SAAAC,GAAI,OACxCA,EAAKxE,GAAGyE,cAAcC,WAAW3B,EAAY0B,mBAOrD,IAAM5C,EChGC,SAAkB8C,EAAOC,EAAYxE,GAEhD,IAAMyE,GAAcD,EAAa,GAAKxE,EAEvC,OAAQO,IAAEgE,GAAOG,MAAMD,GAAYE,KAAK3E,GAAUiB,QD4F3B2D,CAFlBV,EAAmB3D,IAAEsE,QAAQX,EAAkB,CAACtB,EAAQ9B,KAAM,CAAC8B,EAAQC,QAE1B3C,EAAaF,GAE1D,OACI,kBAAC,IAAMS,SAAP,KACI,wBAAIE,UAAU,QAAd,kBAEA,kBAAC,EAAD,CAAWM,MAAO0B,EAAazB,SAAU6C,KAAKf,eAE9C,kBAAC,EAAD,CAAgBvB,UAAWA,EAC3BC,OAAQqC,KAAKb,WACbvB,WAAYoC,KAAKT,aACjB1B,WAAYmC,KAAKX,mBAEjB,kBAAC,EAAD,CAAYrD,WAAYiE,EAAOhE,SAAUA,EAAUC,aAAc8D,KAAKjB,iBAClE5C,YAAaA,IAGjB,kBAAC,IAAD,W,GAzGQ4E,aEoDTC,E,2MAxDXtC,MAAQ,CACJhD,SAAU,I,8NNWcuF,EMH6BjB,KAAKjE,MAAMmF,MAAMC,OAAOtF,GNI1EF,IAAMmE,IAAIvE,EAAc,OAAS0F,G,gBMJlBvF,E,EAANqE,KACRC,KAAKhB,SAAS,CAAEtD,SAAUA,EAAS,K,oDAI/B,KAAG0F,SAAiC,MAAtB,KAAGA,QAAQC,O,0CAClBrB,KAAKjE,MAAMuF,QAAQC,QAAQ,e,kCNH3C,IAAyBN,I,yGMSlB,IACEvF,EAAasE,KAAKtB,MAAlBhD,SACR,OACI,kBAAC,IAAMgB,SAAP,KACI,wBAAIE,UAAU,QAAd,kBACoBlB,EAAS2B,MAG7B,yBAAKT,UAAU,OAEX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SACd,wBAAIA,UAAU,QAAd,oBACA,4BACI,qCAAWlB,EAAS2C,MACpB,qCAAW3C,EAAS0B,MACpB,4CAAkB1B,EAAS8F,aAC3B,wCAAc9F,EAAS2F,OAAvB,KACA,sCAAY3F,EAAS+F,MAArB,a,GAzCEV,aCsBfW,EAvBE,WACb,OAAQ,yBAAK9E,UAAU,OACnB,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,qCAEA,6CAEA,yBAAKA,UAAU,iBAAf,0DAGA,yBAAKA,UAAU,iBAEX,kBAAC,IAAD,CAAM0B,GAAG,KACL,0BAAM1B,UAAU,iCADpB,qBCWL+E,EAxBF,WACT,OACI,yBAAKC,MAAM,aACP,wBAAIA,MAAM,aAAV,wCACA,uBAAGA,MAAM,QAAT,wOAGA,wBAAIA,MAAM,SACV,iDACA,4BACI,oCACA,wEACA,+CACA,+CAEJ,uBAAGA,MAAM,oBACL,kBAAC,IAAD,CAAMA,MAAM,mBAAmBtD,GAAG,cAAlC,2BCsBDuD,MA9Bf,WACE,OACE,kBAAC,IAAMnF,SAAP,KACE,yBAAKE,UAAU,+CACb,uBAAGA,UAAU,eAAekF,KAAK,KAAjC,mBACA,4BAAQlF,UAAU,iBAAiBQ,KAAK,SAAS2E,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQvF,aAAW,qBAC5K,0BAAMC,UAAU,0BAKlB,0BAAMA,UAAU,aACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuF,KAAK,iBAAiBC,UAAWpB,IACxC,kBAAC,IAAD,CAAOmB,KAAK,aAAaC,UAAWV,IACpC,kBAAC,IAAD,CAAOS,KAAK,aAAaC,UAAW3D,IACpC,kBAAC,IAAD,CAAO0D,KAAK,IAAIE,OAAK,EAACD,UAAWT,IACjC,kBAAC,IAAD,CAAUrD,GAAG,kBChBLgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2D,YCVNwB,EAAQ,IAAUC,SAElBC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f7a329f.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {apiUrl} from '../config.json'\r\n\r\n//use enviroment variable when deploy on server like heroku\r\n// axios.defaults.baseURL=process.env.REACT_API_URL;\r\n\r\n\r\nconst apiEndpoint = apiUrl;\r\n\r\nexport function getShipments() {\r\n    return axios.get(apiEndpoint);\r\n\r\n}\r\n\r\nexport function updateShipment(shipment) {\r\n    return axios.put(apiEndpoint + \"/\" + shipment.id, shipment);\r\n}\r\n\r\nexport function getShipmentById(shipmentId) {\r\n    return axios.get(apiEndpoint + \"?id=\" + shipmentId );\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst Pagination = (props) => {\r\n\r\n    const { itemsCount, pageSize, onPageChange, currentPage } = props;\r\n\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul className=\"pagination\">\r\n                    {/* <li className=\"page-item\"><button className=\"page-link\" href=\"#\">Previous</button></li> */}\r\n                    {pages.map(\r\n                        page =>\r\n                            <li key={page} className={page === currentPage ? \"page-item active\" : \"page-item \"}>\r\n                                <button className=\"page-link\" onClick={() => onPageChange(page)} >{page}</button>\r\n                            </li>\r\n\r\n                    )}\r\n\r\n\r\n                    {/* <li className=\"page-item\"><button className=\"page-link\" >Next</button></li> */}\r\n                </ul>\r\n            </nav>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React from 'react';\r\n\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    const { value, onChange } = props;\r\n\r\n   \r\n\r\n    return (\r\n        <input\r\n        type='text'\r\n        name='searchShipments'\r\n        className='form-control my-3 '\r\n        placeholder='Search by id ...'\r\n        value={value}\r\n        onChange={e =>onChange(e.currentTarget.value)}>\r\n\r\n\r\n        </input>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst ShipmentsTable = ({ shipments, onSort, updateName, changeMode }) => {\r\n\r\n    if (!shipments.length) {\r\n        return <p>Sorry, the list is empty.</p>;\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <table className=\"table table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" onClick={() => onSort('id')}>  #ID</th>\r\n                    <th scope=\"col\" onClick={() => onSort('name')}>  Name</th>\r\n                    <th scope=\"col\" onClick={() => onSort('mode')}>  Mode</th>\r\n                    <th scope=\"col\" onClick={() => onSort('type')}>  Type</th>\r\n                    <th scope=\"col\" >  Details</th>\r\n                    <th scope=\"col\" >  Update </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n                {\r\n                    shipments.map((shipment, index) =>\r\n\r\n                        <tr key={shipment.id}>\r\n                            <th scope=\"row\"> {shipment.id}</th>\r\n                            <td>\r\n                                {shipment.editMode !== \"edit\" && <span>{shipment.name}</span>}\r\n\r\n\r\n                                {shipment.editMode === \"edit\" &&\r\n                                    <form>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"shipmentName\" className=\"form-control\" id=\"shipmentName\"\r\n                                                aria-describedby=\"emailHelp\" placeholder=\"Enter Name\"\r\n                                                defaultValue={shipment.name}\r\n                                                onChange={(e) => {\r\n                                                    shipment.name = e.target.value;\r\n\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </form>\r\n                                }\r\n\r\n\r\n\r\n\r\n                            </td>\r\n                            <td>{shipment.mode}</td>\r\n                            <td>{shipment.type}</td>\r\n                            <td><Link key={shipment.id} to={`/shipments/${shipment.id}`} >Deatils</Link></td>\r\n                            <td>\r\n                                <button className='btn btn-primary btn-sm'\r\n                                    style={{ display: shipment.editMode !== \"edit\" ? 'block' : 'none' }}\r\n                                    onClick={() => { changeMode(shipment) }}>Update</button>\r\n\r\n                                <button className='btn btn-primary btn-sm'\r\n                                    style={{ display: shipment.editMode === \"edit\" ? 'block' : 'none' }}\r\n                                    onClick={() => {\r\n                                        updateName(shipment);\r\n                                        shipment.editMode = 'view'\r\n                                    }} >Save</button>\r\n                            </td>\r\n\r\n                        </tr>\r\n\r\n\r\n                    )}\r\n\r\n\r\n\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default ShipmentsTable;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { getShipments, updateShipment } from '../services/shipmentServices'\r\nimport Pagination from './common/pagination';\r\nimport SearchBox from './common/searchBox';\r\nimport paginate from '../helper/helpers';\r\nimport ShipmentsTable from './shipmentsTable';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nimport _ from \"lodash\";\r\n\r\nclass Shipments extends Component {\r\n\r\n    state = {\r\n\r\n        shipments: [\r\n        ],\r\n        shipmentsCount: 0,\r\n        pageSize: 20,\r\n        currentPage: 1,\r\n        searchQuery: \"\",\r\n        sortCol: { key: \"id\", order: \"asc\" },\r\n      \r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        const { data: shipments } = await getShipments();\r\n        this.setState({ shipments });\r\n\r\n    }\r\n\r\n\r\n    handelPageChange = page => {\r\n        this.setState({ currentPage: page });\r\n    }\r\n\r\n    handelSearch = query => {\r\n        this.setState({ searchQuery: query, currentPage: 1 });\r\n    }\r\n\r\n\r\n    handelSort = sortKey => {\r\n        let sortCol = { ...this.state.sortCol };\r\n\r\n        if (sortCol.key === sortKey) {\r\n            sortCol.order = (sortCol.order === \"asc\" ? \"desc\" : \"asc\")\r\n\r\n        }\r\n        else {\r\n            sortCol = { key: sortKey, order: 'asc' };\r\n        }\r\n\r\n        this.setState({ sortCol });\r\n    }\r\n    \r\n    handelUpdateMode  =  (shipment) => {\r\n        shipment.editMode=\"edit\";\r\n        const shipments = [...this.state.shipments];\r\n        const index = shipments.indexOf(shipment);\r\n        shipments[index] = shipment;\r\n        this.setState({ shipments});\r\n\r\n    }\r\n\r\n    handelUpdate = async (shipment) => {\r\n\r\n        await updateShipment(shipment);\r\n        const shipments = [...this.state.shipments];\r\n        const index = shipments.indexOf(shipment);\r\n        shipments[index] = shipment;\r\n        this.setState({ shipments});\r\n\r\n        toast.success(\"Shipment updated Successfully !\", {\r\n            position: toast.POSITION.TOP_CENTER\r\n        });\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { length: count } = this.state.shipments;\r\n        const { pageSize, currentPage, shipments: shipmentsList, searchQuery, sortCol } = this.state;\r\n\r\n\r\n        // get all shipments incase if no filtring by search \r\n        let filtredShipments = shipmentsList;\r\n\r\n        if (searchQuery) {\r\n            filtredShipments = shipmentsList.filter(item =>\r\n                item.id.toLowerCase().startsWith(searchQuery.toLowerCase())\r\n            )\r\n\r\n        }\r\n\r\n        filtredShipments = _.orderBy(filtredShipments, [sortCol.key], [sortCol.order]);\r\n\r\n        const shipments = paginate(filtredShipments, currentPage, pageSize);\r\n\r\n        return (\r\n            <React.Fragment >\r\n                <h1 className=\"mt-5\">Shipments List</h1>\r\n\r\n                <SearchBox value={searchQuery} onChange={this.handelSearch} ></SearchBox>\r\n\r\n                <ShipmentsTable shipments={shipments} \r\n                onSort={this.handelSort} \r\n                updateName={this.handelUpdate} \r\n                changeMode={this.handelUpdateMode} />\r\n\r\n                <Pagination itemsCount={count} pageSize={pageSize} onPageChange={this.handelPageChange}\r\n                    currentPage={currentPage}\r\n                />\r\n\r\n                <ToastContainer />\r\n\r\n            </React.Fragment>\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Shipments;  ","import _ from 'lodash';\r\n\r\nexport default function paginate(items, pageNumber, pageSize) {\r\n\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n\r\n   return  _(items).slice(startIndex).take(pageSize).value();\r\n\r\n}","import React, { Component } from 'react';\r\nimport { getShipmentById } from '../services/shipmentServices'\r\n\r\n\r\nclass ShipmentDetails extends Component {\r\n\r\n    state = {\r\n        shipment: []\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        // we can use redux for getting shipment by ID but for time limition we will produce with this approch\r\n        try {\r\n            const { data: shipment } = await getShipmentById(this.props.match.params.id);\r\n            this.setState({ shipment: shipment[0] });\r\n\r\n        }\r\n        catch (ex) {\r\n            if (ex.respose && ex.respose.status === 404)\r\n                return this.props.history.replace(\"/not-found\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { shipment } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <h1 className=\"my-4\">\r\n                    Shipment Name :{shipment.name}\r\n                </h1>\r\n\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-4\">\r\n                        <hr className=\"my-4\" />\r\n                        <h4 className=\"my-3\">Shipment Details</h4>\r\n                        <ul>\r\n                            <li>Mode: {shipment.mode}</li>\r\n                            <li>Type: {shipment.type}</li>\r\n                            <li>Destination: {shipment.destination}</li>\r\n                            <li>Statues: {shipment.status} </li>\r\n                            <li>Total: {shipment.total} </li>\r\n                        </ul>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default ShipmentDetails;\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NotFound = () => {\r\n    return (<div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <div className=\"error-template\">\r\n                <h1>\r\n                    Oops!</h1>\r\n                <h2>\r\n                    404 Not Found</h2>\r\n                <div className=\"error-details\">\r\n                    Sorry, an error has occured, Requested page not found!\r\n            </div>\r\n                <div className=\"error-actions\">\r\n\r\n                    <Link to=\"/\">\r\n                        <span className=\"glyphicon glyphicon-envelope\"></span>Take Me Home\r\n\r\n                        </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div class=\"jumbotron\">\r\n            <h1 class=\"display-4\">FreightHub Frontend Coding Challenge</h1>\r\n            <p class=\"lead\">\r\n                The main goal is for the user to check the shipments at a glance. This allows users to take faster decisions and plan ahead of time.\r\n                Providing information to the customer increases transparency and reduces communication issues..</p>\r\n            <hr class=\"my-4\" />\r\n            <h3>Sections included</h3>\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>Shipments List ( Search and update name)</li>\r\n                <li>Shipment Detais</li>\r\n                <li>Not Found page</li>\r\n            </ul>\r\n            <p class=\"lead text-center\">\r\n                <Link class=\"btn btn-primary \" to=\"/shipments\">Go to Shipment List </Link>\r\n            </p>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Shipments from './components/shipments';\nimport ShipmentDetails from './components/shipmentDetails';\nimport NotFound from './components/common/not-found';\nimport Home from './components/home';\n\n\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"/\">Freighthub Task</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n      </nav>\n    \n        <main className=\"container\">\n          <Switch>\n            <Route path='/shipments/:id' component={ShipmentDetails} />\n            <Route path='/not-found' component={NotFound} />\n            <Route path='/shipments' component={Shipments}  />\n            <Route path='/' exact component={Home} />\n            <Redirect to=\"not-found\" />\n\n          </Switch>\n\n\n        </main>\n     \n\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\nrequire('dotenv').config();\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}